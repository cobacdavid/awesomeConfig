-------------------------------------------------
-- author: David Cobac
-- twitter: @david_cobac
-- github: https://github.com/cobacdavid
-- date: 2020
-- copyright: CC-BY-NC-SA
-------------------------------------------------
-------------------------------------------------
-- some parts from awesome wm 
-- distribution
-- copyright ??
-------------------------------------------------
--
-- GDM3 screen configuration: 
-- 1. start with gnome
-- 2. configure screens with the gnome tool
-- 3. copy ~/.config/monitors.xml to /var/lib/gdm/.config/monitors.xml
-- from http://forums.debian.net/viewtopic.php?f=6&t=122320
--
-- awesomeWM session screen configuration
-- 1. install and run arandr
-- 2. create ~/.screenlayout/xrandr_config.sh
-- 3. execute this script from ~/.profile
--
-- if you want to insert a xrandr command in rc.lua, it will
-- possibly results in bad screen geometry variables so that you
-- got to awesome.restart awesomeWM to retrieve proper values
--
--
-- Standard awesome library
os    = require("os")
awful = require("awful")
--
config = awful.util.getdir("config")
os.setlocale(os.getenv("LANG"))
myhome = os.getenv("HOME") .. "/"
--
-- IMPORTANT VARIABLES
-- also see variableDefinitions.lua
socket            = require("socket")
-- asus is my laptop's hostname
local hname = socket.dns.gethostname()
if hname == "asus" then
    ordinateur = "laptop"
elseif hname == "david-coolermaster" then
    ordinateur = "desktop"
    -- configuration1
    -- VGA-0 1920x1080
    -- DVI-0 1920x1080
    -- xrandr --output DVI-0 --mode 1920x1080 --output VGA-0 --above DVI-0 --mode 1920x1080
    ecrans = "configuration1"
elseif hname == "coolermaster" then
    ordinateur = "desktop2"
    -- configuration1
    -- VGA-0 1920x1080
    -- DVI-0 1920x1080
    -- xrandr --output DVI-0 --mode 1920x1080 --output VGA-0 --above DVI-0 --mode 1920x1080
    ecrans = "configuration1"
else
    ordinateur = "inconnu"
end
--
largeurPremier = screen[1].geometry.width
hauteurPremier = screen[1].geometry.height
if screen:count() >= 2 then
   largeurSecond = screen[2].geometry.width
   hauteurSecond = screen[2].geometry.height
end
--
-- other variables
dofile (config ..  "/variableDefinitions.lua")
--
--
gears            = require("gears")
-- Theme handling library
beautiful        = require("beautiful")
beautiful.init(config .. "/themes/david/theme.lua")
--
wibox            = require("wibox")
naughty          = require("naughty")
menubar          = require("menubar")
-- hotkeys_popup    = require("awful.hotkeys_popup").widget
-- require("awful.hotkeys_popup.keys")
require("awful.autofocus")
has_fdo, freedesktop = pcall(require, "freedesktop")
--
fu               = require("fonctionsUtiles")
-- generic widget
flower_pbar = require("widgets.flower_pbar.flower_pbar")
-- widgets
separateur       = require("widgets.separateur.separateur")
heure            = require("widgets.heure.heure")
bigC             = require("widgets.bigClock.bigClock")
volumemaster     = require("widgets.volumeMaster.volumeMaster")
luminosite       = require("widgets.luminosite.luminosite")
luminositeEcran  = require("widgets.luminositeEcran.luminositeEcran")
calendrier       = require("widgets.calendrier.calendrier")
calendrierMois   = require("widgets.calendrier.calendrierMois")
infos            = require("widgets.infos.infos")
chrono           = require("widgets.chrono.chrono")
if ordinateur == "laptop" then
   batt          = require("widgets.batterie.batterie")
end
lastfm           = require("widgets.lastfm-scrobbles.lastfm-scrobbles")
btg              = require("widgets.batterieGraph.batterieGraph")
meteo            = require("widgets.meteo.meteo")
covid            = require("widgets.covid.covid")
matrice          = require("widgets.matrice.matrice")
fichiers         = require("widgets.fichiers.fichiers")
--
ppeintTag        = require("widgets.ppeintTag.ppeintTag")
ppeintNasa       = require("widgets.ppeintNasa.ppeintNasa")
ppeintId         = require("widgets.ppeintId.ppeintId")
--
mpdCom           = require("mpdCommande")
ecranFlou        = require("widgets.ecranFlou.ecranFlou")
-- widgets titlebar fenêtres
killneuf         = require("widgets.killneuf.killneuf")
blocageopacite   = require("widgets.opacite.blocageopacite")
opacite          = require("widgets.opacite.opacite")
screenshot       = require("widgets.screenshot.screenshot")
dimFenetre       = require("widgets.dimFenetre.dimFenetre")
tempsPasse       = require("widgets.tempsPasse.tempsPasse")
titreClient      = require("widgets.titreClient.titreClient")
secretFenetre    = require("widgets.secretFenetre.secretFenetre")
-- widgets externes
github_contributions_widget = require("awesome-wm-widgets.github-contributions-widget.github-contributions-widget")
idMeteo = require("widgets.meteo.private_openweather_api_key")
weather_widget = require("awesome-wm-widgets.weather-widget.weather")
--
semi_analog_clock = require("widgets.semi_analog_clock.semi_analog_clock")
almost_analog_clock = require("widgets.almost_analog_clock.almost_analog_clock")
--
--
listeRcFiles = {--
   "errorhandling45.lua",
   -- "logicielsIndispensables.lua",
   -- "myPRIVATEvariables.lua",
   "stats.lua",
   "menu.lua",
   "tagWibar.lua",
   "sourisEtClavier.lua",
   "rules45.lua",
   "signaux.lua"
}
--
for i, f in ipairs(listeRcFiles) do
   dofile (config ..  "/" .. f)
end
--
-- appsDemarrage in variableDefinitions
for _, app in ipairs(appsDemarrage) do
   fu.executeUneFois(app)
end
--
ecranFlou.isActivated = false
ppeintTag.imagesFonds()
ppeintDesc = ppeintNasa()
--
-- ppeintTag on first tag of first screen at startup
screen[1].selected_tag:emit_signal("property::selected")
--
fu.commande_execute(clavierCmd .. " " .. clavierCfgPath .. "/" .. configAwesome)
--
fu.montre("Démarrage terminé")
